import argparse
import json
import os

TASKS_FILE = 'tasks.json'


def load_tasks():
    if not os.path.exists(TASKS_FILE):
        return []
    try:
        with open(TASKS_FILE, 'r') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []


def save_tasks(tasks):
    with open(TASKS_FILE, 'w') as f:
        json.dump(tasks, f, indent=4)


def main():
    parser = argparse.ArgumentParser(
        description='Focus Tree - –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')

    subparsers = parser.add_subparsers(
        dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    parser_add = subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É')

    parser_add.add_argument('title', type=str, help='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')

    parser_list = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏')

    parser_done = subparsers.add_parser(
        'done', help='–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é')
    parser_done.add_argument(
        'task_id', type=int, help='ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π')

    parser_delete = subparsers.add_parser('delete', help='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
    parser_delete.add_argument(
        'task_id', type=int, help='ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')

    parser_focus = subparsers.add_parser(
        'focus', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏')
    parser_focus.add_argument('minutes', type=int, nargs='?',
                              default=25, help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25)')

    args = parser.parse_args()

    tasks = load_tasks()

    if args.command == 'add':
        if tasks:
            new_id = max(task['id'] for task in tasks) + 1
        else:
            new_id = 1

        new_task = {'id': new_id,
                    'title': args.title, 'status': 'active'}

        tasks.append(new_task)

        save_tasks(tasks)
        print(f'–ó–∞–¥–∞—á–∞ "{args.title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID {new_id}!')

    elif args.command == 'list':
        if not tasks:
            print("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!")
        else:
            print("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:")
            for task in tasks:
                print(f"[{task['id']}] {task['status']}: {task['title']}")

    elif args.command == 'done':
        task_found = False
        for task in tasks:
            if task['id'] == args.task_id:
                task['status'] = 'completed'
                task_found = True
                break
        if task_found:
            save_tasks(tasks)
            print(f"–ó–∞–¥–∞—á–∞ —Å ID {args.task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
        else:
            print(f"–ó–∞–¥–∞—á–∞ —Å ID {args.task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif args.command == 'delete':
        task_found = False
        for task in tasks:
            if task['id'] == args.task_id:
                tasks.remove(task)
                task_found = True
                break

        if task_found:
            save_tasks(tasks)
            print(f"–ó–∞–¥–∞—á–∞ —Å ID {args.task_id} —É–¥–∞–ª–µ–Ω–∞!")
        else:
            print(f"–ó–∞–¥–∞—á–∞ —Å ID {args.task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif args.command == 'focus':
        import time
        total_seconds = args.minutes * 60

        print(f"–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å! –¢–∞–π–º–µ—Ä –Ω–∞ {args.minutes} –º–∏–Ω—É—Ç.")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.")

        try:
            for remaining in range(total_seconds, 0, -1):
                mins, secs = divmod(remaining, 60)
                time_display = f"{mins:02d}:{secs:02d}"
                print(f"–û—Å—Ç–∞–ª–æ—Å—å: {time_display}", end='\r')
                time.sleep(1)

            print("\n\n–í—Ä–µ–º—è –≤—ã—à–ª–æ! –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üéâ")
            print("\a")

        except KeyboardInterrupt:
            print("\n\n–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")

    else:
        parser.print_help()


if __name__ == '__main__':
    main()
